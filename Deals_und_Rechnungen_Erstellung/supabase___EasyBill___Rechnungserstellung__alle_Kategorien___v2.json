{
  "name": "supabase - EasyBill - Rechnungserstellung (alle Kategorien) _v2",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "minutes",
              "minutesInterval": 30
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -2760,
        7840
      ],
      "id": "b6497551-133f-4a19-92ab-14133b612f47",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {
        "mode": "combineBySql",
        "numberInputs": 3,
        "query": "SELECT *\nFROM input1\nINNER JOIN input2 ON\ninput1.name = input2.id\nINNER JOIN input3 ON input2.hubspot_produkt_id = input3.hubspot_produkt_id\n\n   "
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        -1380,
        7840
      ],
      "id": "62ba08c5-eedf-4c83-8153-72de0bb3fdc4",
      "name": "Merge"
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "rechnungen",
        "filters": {
          "conditions": [
            {
              "keyName": "rechnung_datenbank_id",
              "condition": "eq",
              "keyValue": "={{ $('get Rechnung').item.json.rechnung_datenbank_id }}"
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "easybill_rechnung_id",
              "fieldValue": "={{ $json.invoiceNumber }}"
            },
            {
              "fieldId": "easybill_dokument_id",
              "fieldValue": "={{ $json.documentId }}"
            },
            {
              "fieldId": "invoice",
              "fieldValue": "easybill_erstellt"
            },
            {
              "fieldId": "invoice_status",
              "fieldValue": "offen"
            },
            {
              "fieldId": "faelligkeitsdatum_rechnung",
              "fieldValue": "={{ $json.due_date }}}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -860,
        7840
      ],
      "id": "ecbe9e36-4cb3-4ada-8aea-90206ed7ab45",
      "name": "Supabase1",
      "credentials": {
        "supabaseApi": {
          "id": "5apRBjeRddQHqIml",
          "name": "SupaBase BV Finance DB"
        }
      }
    },
    {
      "parameters": {
        "operation": "formatDate",
        "date": "={{ $json.timestamp }}",
        "format": "yyyy-MM-dd",
        "options": {}
      },
      "type": "n8n-nodes-base.dateTime",
      "typeVersion": 2,
      "position": [
        -2460,
        7840
      ],
      "id": "fbf2f9ba-1d79-4a37-8877-22a689c92d3b",
      "name": "Date & Time"
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "rechnungen",
        "limit": 1,
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "keyName": "invoice",
              "condition": "eq",
              "keyValue": "DB_erstellt"
            },
            {
              "keyName": "rechnungsdatum",
              "condition": "eq",
              "keyValue": "={{ $json.formattedDate }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -2220,
        7840
      ],
      "id": "0d43689a-af47-48a3-9987-6ed672c3786f",
      "name": "get Rechnung",
      "credentials": {
        "supabaseApi": {
          "id": "5apRBjeRddQHqIml",
          "name": "SupaBase BV Finance DB"
        }
      }
    },
    {
      "parameters": {
        "operation": "get",
        "tableId": "kunde",
        "filters": {
          "conditions": [
            {
              "keyName": "hubspot_kunden_id",
              "keyValue": "={{ $json.kunden_id }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -1780,
        7640
      ],
      "id": "535a43f1-3506-4c99-b725-0f2e1bd051b1",
      "name": "get Kunden",
      "credentials": {
        "supabaseApi": {
          "id": "5apRBjeRddQHqIml",
          "name": "SupaBase BV Finance DB"
        }
      }
    },
    {
      "parameters": {
        "operation": "get",
        "tableId": "produkte",
        "filters": {
          "conditions": [
            {
              "keyName": "name",
              "keyValue": "={{ $json.product_name }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -1680,
        8040
      ],
      "id": "94844e0c-ebf2-4920-8645-0e32f66768df",
      "name": "get Produkt",
      "credentials": {
        "supabaseApi": {
          "id": "5apRBjeRddQHqIml",
          "name": "SupaBase BV Finance DB"
        }
      }
    },
    {
      "parameters": {
        "operation": "get",
        "tableId": "deals",
        "filters": {
          "conditions": [
            {
              "keyName": "hubspot_deal_id",
              "keyValue": "={{ $json.hubspot_deal_id }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -1860,
        8040
      ],
      "id": "afdf227b-4206-4e4a-80f3-ab185f37de1b",
      "name": "get Produkt from Deal",
      "credentials": {
        "supabaseApi": {
          "id": "5apRBjeRddQHqIml",
          "name": "SupaBase BV Finance DB"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "/**\n * n8n Function Node\n */\n\nconst apiKey = '7zDToaoQlotLDQHnQwUKgBKOEIljhEvbmRkJ5TgBIIVaqo02pXlTz6yJFyOcihGB';\nconst baseUrl = 'https://api.easybill.de/rest/v1';\n\n/** \n * Hilfsfunktion: GET \n */\nasync function httpGet(thisContext, endpoint, qs = {}) {\n  const options = {\n    method: 'GET',\n    url: `${baseUrl}${endpoint}`,\n    headers: {\n      Authorization: `Bearer ${apiKey}`,\n      'Content-Type': 'application/json',\n    },\n    qs,\n    json: true,\n  };\n  return thisContext.helpers.httpRequest(options);\n}\n\n/** \n * Hilfsfunktion: POST \n */\nasync function httpPost(thisContext, endpoint, body = {}) {\n  const options = {\n    method: 'POST',\n    url: `${baseUrl}${endpoint}`,\n    headers: {\n      Authorization: `Bearer ${apiKey}`,\n      'Content-Type': 'application/json',\n    },\n    body,\n    json: true,\n  };\n  return thisContext.helpers.httpRequest(options);\n}\n\n/** \n * Hilfsfunktion: PUT \n */\nasync function httpPut(thisContext, endpoint, body = undefined) {\n  const options = {\n    method: 'PUT',\n    url: `${baseUrl}${endpoint}`,\n    headers: {\n      Authorization: `Bearer ${apiKey}`,\n      'Content-Type': 'application/json',\n    },\n    json: true,\n  };\n  if (body !== undefined) {\n    options.body = body;\n  }\n  return thisContext.helpers.httpRequest(options);\n}\n\n/**\n * Kunde in Easybill per E-Mail suchen\n */\nasync function getCustomerByEmail(thisContext, email) {\n  const data = await httpGet(thisContext, '/customers', { emails: email });\n  if (data && data.items && data.items.length > 0) {\n    return data.items[0];\n  }\n  return null;\n}\n\n/**\n * Produkt (Position) in Easybill per Nummer/Name suchen\n */\nasync function getProductByName(thisContext, productName) {\n  const data = await httpGet(thisContext, '/positions', { number: productName });\n  if (data && data.items && data.items.length > 0) {\n    return data.items[0];\n  }\n  return null;\n}\n\n/** \n * Rechnung erstellen (POST /documents)\n */\nasync function createInvoice(thisContext, invoicePayload) {\n  return httpPost(thisContext, '/documents', invoicePayload);\n}\n\n/** \n * Rechnung finalisieren\n */\nasync function finalizeDocument(thisContext, documentId) {\n  return httpPut(thisContext, `/documents/${documentId}/done`);\n}\n\n/**\n * Hauptfunktion: Liest dein JSON aus und erzeugt + finalisiert die Rechnung.\n */\nasync function execute() {\n  const items = $input.all(); // Alle eingehenden Items (z. B. 1 Item)\n  const returnData = [];\n\n  for (let i = 0; i < items.length; i++) {\n    try {\n      // JSON-Daten vom aktuellen Item\n      const data = items[i].json;\n\n      // ---------------------------------------\n      // 1) Felder aus deinem JSON entnehmen\n      // ---------------------------------------\n      const {\n        hubspot_kunden_id,\n        vorname_kunde,\n        nachname_kunde,\n        strasse_hausnummer_kunde,\n        plz_kunde,\n        stadt_kunde,\n        land,\n        unternehmen,\n        email,\n        easybill_kunden_id,\n        rate,\n        rechnungsdatum,\n        rechnungsbetrag,\n        rechnung_datenbank_id,\n        name,\n        firma,\n        produkt_typ,\n        beschreibung\n      } = data;\n\n      // Datum und FÃ¤lligkeit in YYYY-MM-DD umwandeln\n      const invoiceDate = rechnungsdatum ? rechnungsdatum.slice(0, 10) : null; \n\n      // Wir wollen am Ende \"dealId_rechnungsnummer\" ausgeben\n      const dealidRechnungsnummer = `${rechnung_datenbank_id}`;\n\n      // ---------------------------------------\n      // 2) Kunde in Easybill suchen\n      // ---------------------------------------\n      const foundCustomer = await getCustomerByEmail(this, email);\n      if (!foundCustomer) {\n        throw new Error(`Kunde mit E-Mail \"${email}\" nicht in Easybill gefunden.`);\n      }\n\n      // ---------------------------------------\n      // 3) Produkt in Easybill suchen\n      // ---------------------------------------\n      const foundProduct = await getProductByName(this, name);\n      if (!foundProduct) {\n        throw new Error(`Produkt \"${name}\" nicht in Easybill gefunden (Artikelnummer).`);\n      }\n\n      // ---------------------------------------\n      // 4) Rechnung erstellen (POST /documents)\n      // ---------------------------------------\n      const docPayload = {\n        document_type: 'INVOICE',        // Rechnung\n        customer_id: foundCustomer.id,   // ID des gefundenen Kunden\n        document_date: invoiceDate,      // \"2025-04-07\"\n        due_date: invoiceDate,           // FÃ¤lligkeitsdatum (kann angepasst werden)\n        currency: 'EUR',\n        items: [\n          {\n            type: 'POSITION', \n            position_id: foundProduct.id, \n            quantity: rate, \n            single_price_gross: betrag || 0,\n            vat_percent: 0, // ggf. anpassen\n          },\n        ],\n      };\n\n      // Rechnung erzeugen\n      const createdDocument = await createInvoice(this, docPayload);\n\n      // ---------------------------------------\n      // 5) Rechnung finalisieren (PUT /documents/:id/done)\n      // ---------------------------------------\n      const finalizedDocument = await finalizeDocument(this, createdDocument.id);\n\n      // ---------------------------------------\n      // 6) Ergebnis zurÃ¼ckgeben (inkl. Dokumenten-ID und Rechnungsnummer)\n      // ---------------------------------------\n      returnData.push({\n        json: {\n          success: true,\n          message: 'Rechnung erfolgreich erstellt und finalisiert.',\n          documentId: createdDocument.id,\n          invoiceNumber: finalizedDocument.number,\n          dealid_rechnungsnummer: dealidRechnungsnummer,\n        },\n      });\n\n    } catch (error) {\n      returnData.push({ json: { success: false, error: error.message } });\n    }\n  }\n\n  return returnData;\n}\n\nreturn execute();\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1060,
        7840
      ],
      "id": "b5b75340-f5dd-4f6b-8dd4-489c6e252641",
      "name": "Rechnung_in_easybill"
    }
  ],
  "pinData": {},
  "connections": {
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Date & Time",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Rechnung_in_easybill",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Date & Time": {
      "main": [
        [
          {
            "node": "get Rechnung",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get Rechnung": {
      "main": [
        [
          {
            "node": "get Kunden",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          },
          {
            "node": "get Produkt from Deal",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get Kunden": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get Produkt": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "get Produkt from Deal": {
      "main": [
        [
          {
            "node": "get Produkt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Rechnung_in_easybill": {
      "main": [
        [
          {
            "node": "Supabase1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "4aca1134-f6a8-4897-8f81-ceac90efd564",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "4ce3415e4d4e6f8f088d9362c05b2a358e7e5ede6a150bc21300c8fe32718369"
  },
  "id": "YIbiU95sLjHkdlzJ",
  "tags": [
    {
      "createdAt": "2025-04-04T05:42:52.822Z",
      "updatedAt": "2025-04-04T05:42:52.822Z",
      "id": "LrWxGybOzI5XxfD3",
      "name": "EasyBill"
    },
    {
      "createdAt": "2025-04-03T09:46:45.826Z",
      "updatedAt": "2025-04-03T09:46:45.826Z",
      "id": "QOILfriCRSp3bEBO",
      "name": "Supabase"
    }
  ]
}